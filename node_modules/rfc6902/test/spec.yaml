# Many of these (those labeled A.*) are pulled almost directly from the appendix of the RFC
- name: A.1. Adding an Object Member
  input:
    {"foo": "bar"}
  patch:
    [{op: "add", path: "/baz", value: "qux"}]
  output:
    {"baz": "qux", "foo": "bar"}
  errors: []
  diffable: true

- name: A.2. Adding an Array Element
  input:
    {"foo": [ "bar", "baz" ]}
  patch:
    [{op: "add", path: "/foo/1", value: "qux"}]
  output:
    {"foo": [ "bar", "qux", "baz" ]}
  errors: []
  diffable: true

- name: A.3. Removing an Object Member
  input:
    {"baz": "qux", "foo": "bar"}
  patch:
    [{op: "remove", path: "/baz"}]
  output:
    {"foo": "bar"}
  errors: []
  diffable: true

- name: A.4. Removing an Array Element
  input:
    {"foo": [ "bar", "qux", "baz" ]}
  patch:
    [{op: "remove", path: "/foo/1"}]
  output:
    {"foo": [ "bar", "baz" ]}
  errors: []
  diffable: true

- name: A.5. Replacing a Value
  input:
    {"baz": "qux", "foo": "bar"}
  patch:
   [{op: "replace", path: "/baz", value: "boo"}]
  output:
    {"baz": "boo", "foo": "bar"}
  errors: []
  diffable: true

- name: A.6. Moving a Value
  input:
    {
      "foo": {
        "bar": "baz",
        "waldo": "fred"
      },
      "qux": {
        "corge": "grault"
      }
    }
  patch:
    [{op: "move", "from": "/foo/waldo", path: "/qux/thud"}]
  output:
    {
      "foo": {
        "bar": "baz"
      },
      "qux": {
        "corge": "grault",
        "thud": "fred"
      }
    }
  errors: []
  diffable: true

- name: A.7. Moving an Array Element
  input:
    {"foo": [ "all", "grass", "cows", "eat" ]}
  patch:
    [{op: "move", "from": "/foo/1", path: "/foo/3"}]
  output:
    {"foo": [ "all", "cows", "eat", "grass" ]}
  errors: []
  diffable: true

- name: "A.8. Testing a Value: Success"
  input:
    {"baz": "qux", "foo": [ "a", 2, "c" ]}
  patch:
    [
      {op: "test", path: "/baz", value: "qux"},
      {op: "test", path: "/foo/1", value: 2}
    ]
  output:
    {"baz": "qux", "foo": [ "a", 2, "c" ]}
  errors: []
  diffable: true

- name: "A.9. Testing a Value: Error"
  input:
    {"baz": "qux"}
  patch:
    [{op: "test", path: "/baz", value: "bar"}]
  output:
    {"baz": "qux"}
  errors: [TestError]
  diffable: false

- name: A.10. Adding a Nested Member Object
  input:
    {"foo": "bar"}
  patch:
    [{op: "add", path: "/child", value: {"grandchild": {}}}]
  output:
    {
      "foo": "bar",
      "child": {
        "grandchild": {}
      }
    }
  errors: []
  diffable: true

- name: A.11. Ignoring Unrecognized Elements
  input:
    {"foo": "bar"}
  patch:
    [{op: "add", path: "/baz", value: "qux", "xyz": 123}]
  output:
    {"foo": "bar", "baz": "qux"}
  errors: []
  diffable: false

- name: A.12. Adding to a Nonexistent Target
  input:
    {"foo": "bar"}
  patch:
    [{op: "add", path: "/baz/bat", value: "qux"}]
  output:
    {"foo": "bar"}
  errors: [MissingError]
  diffable: false

# # Due to JSON.parse's laxity, this type of error is not supported yet.
# You know what, I'm gonnna go out on a limb here and say that this is not
# an invalid patch, but has an undefined operation, which itself may be invalid.
# See http://www.ietf.org/rfc/rfc4627.txt section 2.2, and then
# http://www.ietf.org/rfc/rfc2119.txt section 3.
# It's up to your JSON implementation how to handle duplicate keys.
# In V8's JSON.parse, for example, the last key wins:
#     JSON.parse('[{op: "add", path: "/baz", value: "qux", op: "remove"}]')
#     >>> [ { op: 'remove', path: '/baz', value: 'qux' } ]
# - name: A.13. Invalid JSON Patch Document
#   input:
#     {"foo": "bar"}
#   patch:
#     [{op: "add", path: "/baz", value: "qux", op: "remove"}]
#   output:
#     {"foo": "bar"}
#   errors: [InvalidOperationError]
- name: A.13.2 Invalid JSON Patch Document
  input:
    {"foo": "bar"}
  patch:
    [{op: "transcend", path: "/baz", value: "qux"}]
  output:
    {"foo": "bar"}
  errors: [InvalidOperationError]
  diffable: false

# JSON Pointer encodes ~ as ~0 and / as ~1
# thus /~01 is unescaped to ['', '~1']
# and  /~10 is unescaped to ['', '/0']
- name: A.14. ~ Escape Ordering
  input:
    {"/": 9, "~1": 10}
  patch:
    [{op: "test", path: "/~01", value: 10}]
  output:
    {"/": 9, "~1": 10}
  errors: []
  diffable: true

- name: A.15. Comparing Strings and Numbers
  input:
    {"/": 9, "~1": 10}
  patch:
    [{op: "test", path: "/~01", value: "10"}]
  output:
    {"/": 9, "~1": 10}
  errors: [TestError]
  diffable: false

- name: A.16. Adding an Array Value
  input:
    {"foo": ["bar"]}
  patch:
    [{op: "add", path: "/foo/-", value: ["abc", "def"]}]
  output:
    {"foo": ["bar", ["abc", "def"]]}
  errors: []
  diffable: true

# tests

- name: Test types (failure)
  input: &test-types-input
    whole: 3
    ish: "3.14"
    parts: [3, 141, 592, 654]
    exact: false
    natural: null
    approximation: "true"
    float:
      significand: 314
      exponent: -2
  # careful, js-yaml passes anchors by reference!
  output: *test-types-input
  patch:
    - {op: "test", path: "/whole", value: "3"}
    - {op: "test", path: "/ish", value: 3.14}
    - {op: "test", path: "/parts", value: "3,141,592,654"}
    - {op: "test", path: "/parts/3", value: 654.001}
    - {op: "test", path: "/natural", value: undefined}
    - {op: "test", path: "/approximation", value: true}
    - {op: "test", path: "/float", value: [['significand', 314], ['exponent', -2]]}
  errors: [TestError, TestError, TestError, TestError, TestError, TestError, TestError]
  diffable: false

- name: Test types (success)
  # careful, js-yaml passes anchors by reference!
  input: *test-types-input
  output: *test-types-input
  patch:
    - {op: "test", path: "/whole", value: 3}
    - {op: "test", path: "/ish", value: "3.14"}
    - {op: "test", path: "/parts", value: [3, 141, 592, 654]}
    - {op: "test", path: "/parts/3", value: 654}
    - {op: "test", path: "/natural", value: null}
    - {op: "test", path: "/approximation", value: "true"}
    - {op: "test", path: "/float", value: {significand: 314, exponent: -2}}
  errors: []
  diffable: true
